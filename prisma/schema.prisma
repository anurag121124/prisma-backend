generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:anuragsingh@34.68.128.8:5432/postgres"
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  fullName      String
  socketId      String?
  password      String
  firebaseId    String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  mobile_number String
  is_active     Boolean  @default(true)
  rides         Ride[]

  @@map("users")
}

model Ride {
  id          String     @id @default(cuid())
  userId      String
  captainId   String?
  pickup      String
  destination String
  fare        Float
  status      RideStatus @default(PENDING)
  duration    Int?
  distance    Float?
  paymentId   String?
  orderId     String?
  signature   String?
  otp         String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  is_active   Boolean    @default(true)
  captain     Captain?   @relation(fields: [captainId], references: [id])
  user        User       @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([captainId])
  @@map("rides")
}

model Captain {
  id        String        @id @default(cuid())
  firstName String
  lastName  String?
  email     String        @unique
  password  String
  socketId  String?
  status    CaptainStatus @default(INACTIVE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  is_active Boolean       @default(true)
  location  Location?
  rides     Ride[]
  vehicle   Vehicle?

  @@map("captains")
}

model Vehicle {
  id          String      @id @default(cuid())
  color       String
  plate       String      @unique
  capacity    Int
  vehicleType VehicleType
  captainId   String      @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  is_active   Boolean     @default(true)
  captain     Captain     @relation(fields: [captainId], references: [id])

  @@map("vehicles")
}

model Location {
  id        String   @id @default(cuid())
  latitude  Float
  longitude Float
  captainId String   @unique
  updatedAt DateTime @updatedAt
  is_active Boolean  @default(true)
  captain   Captain  @relation(fields: [captainId], references: [id])

  @@map("locations")
}

model BlacklistToken {
  id        String   @id @default(cuid())
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([token], map: "blacklist_token_token_idx")
  @@index([createdAt], map: "blacklist_token_createdAt_idx")
  @@map("blacklist_tokens")
}

enum RideStatus {
  PENDING
  ACCEPTED
  ONGOING
  COMPLETED
  CANCELLED
}

enum CaptainStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum VehicleType {
  CAR
  MOTORCYCLE
  AUTO
}