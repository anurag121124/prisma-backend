name: Deploy to Google Cloud Run

on:
  push:
    branches:
      - master

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Create .env File
        run: |
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env
          echo "API_URL=${{ secrets.API_URL }}" >> .env
          echo "CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}" >> .env
          echo "RATE_LIMIT_WINDOW=${{ secrets.RATE_LIMIT_WINDOW }}" >> .env
          echo "RATE_LIMIT_MAX=${{ secrets.RATE_LIMIT_MAX }}" >> .env
          echo "SWAGGER_ENABLED=${{ secrets.SWAGGER_ENABLED }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "FIREBASE_ADMIN_CREDENTIALS=${{ secrets.FIREBASE_ADMIN_CREDENTIALS }}" >> .env

      - name: Run Tests
        run: npm test

  build-code:
    name: Build Code
    runs-on: ubuntu-latest
    needs: test  # Run build only if tests pass

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build the project
        run: npm run build

  deploy:
    name: Deploy to Google Cloud Run
    runs-on: ubuntu-latest
    needs: build-code  # Deploy only if the build job passes

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate with Google Cloud
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > /tmp/gcp-key.json
          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          gcloud auth configure-docker gcr.io

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Install Cloud SQL Auth Proxy
        run: |
          wget https://storage.googleapis.com/cloudsql-proxy/v1.33.3/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
          chmod +x cloud_sql_proxy
          ./cloud_sql_proxy -instances=${{ secrets.CLOUD_SQL_INSTANCE }}=tcp:5432 &
          sleep 10 # Give it time to start

      - name: Test Database Connection
        run: |
          PGPASSWORD="${{ secrets.DB_PASSWORD }}" psql -h 34.68.128.8 -U ${{ secrets.DB_USER }} -d postgres -p 5432 -c "SELECT 1;"
        env:
          PGUSER: "${{ secrets.DB_USER }}"
          PGPASSWORD: "${{ secrets.DB_PASSWORD }}"

      - name: Run Prisma Migrations
        run: |
          npm install -g prisma
          npx prisma migrate deploy
        env:
          DATABASE_URL: "${{ secrets.DATABASE_URL }}"

      - name: Build and Push Docker Image
        run: |
          docker buildx build --platform=linux/amd64 \
            -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/prisma-backend:$GITHUB_SHA --push .

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy prisma-backend \
            --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/prisma-backend:$GITHUB_SHA \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --add-cloudsql-instances=${{ secrets.CLOUD_SQL_INSTANCE }} \
            --set-env-vars DATABASE_URL="${{ secrets.DATABASE_URL }}"
