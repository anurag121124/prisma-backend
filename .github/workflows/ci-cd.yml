name: Node.js CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the 'main' branch
  pull_request:
    branches:
      - main  # Trigger workflow for PRs to 'main' branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # Specify the Node.js version you are using

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Run tests (optional)
      - name: Run tests
        run: npm test

      # Step 5: Build the project (e.g., transpile TypeScript to JavaScript)
      - name: Build project
        run: npm run build

      # Step 6: Deploy to a server or service (e.g., Railway, Docker, or other)
      - name: Deploy to Railway
        run: |
          # Assuming Railway CLI is installed and configured
          railway up --projectId ${{ secrets.RAILWAY_PROJECT_ID }}  # Adjust according to your deployment setup

      # Optional: If you want to deploy to a different service, replace with corresponding commands.

  # Optionally, you can add a deployment job for different environments
  deploy-prod:
    runs-on: ubuntu-latest
    needs: build  # Ensure that the build job runs before this one

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # Add your deployment commands here, for example for Railway:
          railway up --env production
